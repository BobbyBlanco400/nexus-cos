# TRAE SOLO Services Configuration
# Docker Compose integration for Nexus COS

version: '3.8'

services:
  # PostgreSQL Database Service
  nexus-postgres:
    image: postgres:15-alpine
    container_name: nexus-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: nexus_cos
      POSTGRES_USER: nexus_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d:ro
      - ./scripts/db-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexus_user -d nexus_cos"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Node.js Backend Service
  nexus-backend-node:
    build:
      context: ./backend
      dockerfile: Dockerfile.node
      args:
        NODE_ENV: production
    container_name: nexus-backend-node
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://nexus_user:${DB_PASSWORD}@nexus-postgres:5432/nexus_cos
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3000
      CORS_ORIGIN: https://${DOMAIN}
      SESSION_SECRET: ${SESSION_SECRET}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./logs/backend-node:/app/logs
    networks:
      - nexus-network
    depends_on:
      nexus-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Python FastAPI Backend Service
  nexus-backend-python:
    build:
      context: ./backend
      dockerfile: Dockerfile.python
      args:
        PYTHON_ENV: production
    container_name: nexus-backend-python
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      PYTHONPATH: /app
      PYTHON_ENV: production
      DATABASE_URL: postgresql://nexus_user:${DB_PASSWORD}@nexus-postgres:5432/nexus_cos
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3001
      CORS_ORIGIN: https://${DOMAIN}
      UVICORN_HOST: 0.0.0.0
      UVICORN_PORT: 3001
      UVICORN_WORKERS: 4
    volumes:
      - ./backend/uploads:/app/uploads
      - ./logs/backend-python:/app/logs
    networks:
      - nexus-network
    depends_on:
      nexus-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # React Frontend with Nginx
  nexus-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_NODE_URL: https://${DOMAIN}/api/node
        VITE_API_PYTHON_URL: https://${DOMAIN}/api/python
        VITE_APP_TITLE: "Nexus COS"
    container_name: nexus-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      NGINX_HOST: ${DOMAIN}
      NGINX_PORT: 80
      NGINX_SSL_PORT: 443
    volumes:
      - ./deployment/nginx/nexuscos.online.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - frontend_static:/usr/share/nginx/html
    networks:
      - nexus-network
    depends_on:
      nexus-backend-node:
        condition: service_healthy
      nexus-backend-python:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Prometheus Monitoring
  nexus-prometheus:
    image: prom/prometheus:latest
    container_name: nexus-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - nexus-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana Dashboard
  nexus-grafana:
    image: grafana/grafana:latest
    container_name: nexus-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: ${DOMAIN}
      GF_SERVER_ROOT_URL: https://${DOMAIN}/grafana/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - nexus-network
    depends_on:
      - nexus-prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Redis Cache (Optional)
  nexus-redis:
    image: redis:7-alpine
    container_name: nexus-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  frontend_static:
    driver: local

networks:
  nexus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16