// Da Boom Boom Room Live! - Database Schema
// Prisma schema for virtual strip club system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with subscription tiers
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  password          String
  firstName         String?
  lastName          String?
  avatar            String?
  dateOfBirth       DateTime?
  isVerified        Boolean  @default(false)
  isActive          Boolean  @default(true)
  role              UserRole @default(MEMBER)
  
  // Subscription information
  subscriptionTier  SubscriptionTier @default(NONE)
  stripeCustomerId  String?
  subscriptionId    String?
  subscriptionStatus SubscriptionStatus @default(INACTIVE)
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  
  // Virtual wallet
  walletBalance     Decimal  @default(0.00) @db.Decimal(10, 2)
  totalSpent        Decimal  @default(0.00) @db.Decimal(10, 2)
  totalTipped       Decimal  @default(0.00) @db.Decimal(10, 2)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLogin         DateTime?
  
  // Relations
  tips              Tip[]
  streamViews       StreamView[]
  leaderboardEntries LeaderboardEntry[]
  walletTransactions WalletTransaction[]
  nftMemberships    NFTMembership[]
  performer         Performer?
  
  @@map("users")
}

// Performer model
model Performer {
  id                String   @id @default(cuid())
  userId            String?  @unique
  stageName         String   @unique
  bio               String?
  avatar            String?
  coverImage        String?
  isOnline          Boolean  @default(false)
  isStreaming       Boolean  @default(false)
  
  // Earnings
  totalEarnings     Decimal  @default(0.00) @db.Decimal(10, 2)
  pendingPayout     Decimal  @default(0.00) @db.Decimal(10, 2)
  
  // Performance metrics
  totalViews        Int      @default(0)
  totalTips         Int      @default(0)
  averageRating     Float    @default(0.0)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastOnline        DateTime?
  
  // Relations
  user              User?    @relation(fields: [userId], references: [id])
  streams           Stream[]
  tips              Tip[]
  
  @@map("performers")
}

// Stream model for live streaming
model Stream {
  id                String      @id @default(cuid())
  performerId       String
  title             String
  description       String?
  streamKey         String      @unique
  streamUrl         String?
  thumbnailUrl      String?
  
  // Stream configuration
  streamType        StreamType  @default(MAIN_STAGE)
  isVREnabled       Boolean     @default(false)
  requiredTier      SubscriptionTier @default(FLOOR_PASS)
  isPrivate         Boolean     @default(false)
  maxViewers        Int         @default(100)
  
  // Stream status
  isLive            Boolean     @default(false)
  viewerCount       Int         @default(0)
  totalViews        Int         @default(0)
  
  // Timestamps
  startedAt         DateTime?
  endedAt           DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relations
  performer         Performer   @relation(fields: [performerId], references: [id], onDelete: Cascade)
  views             StreamView[]
  tips              Tip[]
  
  @@map("streams")
}

// Stream view tracking
model StreamView {
  id                String   @id @default(cuid())
  userId            String
  streamId          String
  joinedAt          DateTime @default(now())
  leftAt            DateTime?
  duration          Int?     // in seconds
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream            Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, streamId])
  @@map("stream_views")
}

// Tip model for virtual tipping
model Tip {
  id                String   @id @default(cuid())
  userId            String
  performerId       String
  streamId          String?
  amount            Decimal  @db.Decimal(10, 2)
  message           String?
  isAnonymous       Boolean  @default(false)
  
  // Processing
  processingFee     Decimal  @db.Decimal(10, 2)
  performerAmount   Decimal  @db.Decimal(10, 2)
  platformAmount    Decimal  @db.Decimal(10, 2)
  
  // Status
  status            TipStatus @default(PENDING)
  processedAt       DateTime?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  performer         Performer @relation(fields: [performerId], references: [id], onDelete: Cascade)
  stream            Stream?  @relation(fields: [streamId], references: [id], onDelete: SetNull)
  
  @@map("tips")
}

// Wallet transaction model
model WalletTransaction {
  id                String            @id @default(cuid())
  userId            String
  amount            Decimal           @db.Decimal(10, 2)
  type              TransactionType
  description       String
  
  // Payment processing
  stripePaymentId   String?
  status            TransactionStatus @default(PENDING)
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  processedAt       DateTime?
  
  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("wallet_transactions")
}

// Leaderboard for gamification
model LeaderboardEntry {
  id                String          @id @default(cuid())
  userId            String
  leaderboardType   LeaderboardType
  score             Decimal         @db.Decimal(10, 2)
  rank              Int
  period            String          // "daily", "weekly", "monthly", "all-time"
  
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, leaderboardType, period])
  @@map("leaderboard_entries")
}

// NFT Membership (placeholder)
model NFTMembership {
  id                String   @id @default(cuid())
  userId            String
  tokenId           String   @unique
  contractAddress   String
  tier              SubscriptionTier
  isActive          Boolean  @default(true)
  
  // Metadata
  metadata          Json?
  imageUrl          String?
  
  // Timestamps
  mintedAt          DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("nft_memberships")
}

// Enums
enum UserRole {
  MEMBER
  PERFORMER
  MODERATOR
  ADMIN
}

enum SubscriptionTier {
  NONE
  FLOOR_PASS
  BACKSTAGE_PASS
  VIP_LOUNGE
  CHAMPAGNE_ROOM
  BLACK_CARD
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum StreamType {
  MAIN_STAGE
  BACKSTAGE
  VIP_LOUNGE
  CHAMPAGNE_ROOM
  PRIVATE
}

enum TipStatus {
  PENDING
  PROCESSED
  FAILED
  REFUNDED
}

enum TransactionType {
  DEPOSIT
  TIP
  REFUND
  PAYOUT
  FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
}

enum LeaderboardType {
  TOP_TIPPER
  TOP_SPENDER
  MOST_ACTIVE
  LONGEST_VIEWER
}