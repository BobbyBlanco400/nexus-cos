version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nexus-postgres
    environment:
      POSTGRES_DB: nexus_cos
      POSTGRES_USER: nexus_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nexus_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexus_user -d nexus_cos"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - nexus-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nexus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - nexus-network

  # Node.js Backend
  backend-node:
    build:
      context: ./backend
      dockerfile: Dockerfile.node
    container_name: nexus-backend-node
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://nexus_user:${POSTGRES_PASSWORD:-nexus_secure_password}@postgres:5432/nexus_cos
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here}
    ports:
      - "3000:3000"
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - nexus-network

  # Python FastAPI Backend
  backend-python:
    build:
      context: ./backend
      dockerfile: Dockerfile.python
    container_name: nexus-backend-python
    environment:
      PYTHONUNBUFFERED: 1
      DATABASE_URL: postgresql://nexus_user:${POSTGRES_PASSWORD:-nexus_secure_password}@postgres:5432/nexus_cos
      REDIS_URL: redis://redis:6379
    ports:
      - "3001:3001"
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - nexus-network

  # Frontend (Nginx serving React build)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nexus-frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nexuscos.online.conf:/etc/nginx/conf.d/default.conf
      - ./deployment/ssl:/etc/nginx/ssl
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - backend-node
      - backend-python
    restart: unless-stopped
    networks:
      - nexus-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: nexus-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - nexus-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: nexus-grafana
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - nexus-network

  # V-Suite Module
  v-suite:
    build:
      context: ./extended/v-suite
      dockerfile: Dockerfile
    container_name: nexus-v-suite
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://nexus_user:${POSTGRES_PASSWORD:-nexus_secure_password}@postgres:5432/nexus_cos
    ports:
      - "3010:3010"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - nexus-network

  # Creator Hub Module
  creator-hub:
    build:
      context: ./extended/creator-hub
      dockerfile: Dockerfile
    container_name: nexus-creator-hub
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://nexus_user:${POSTGRES_PASSWORD:-nexus_secure_password}@postgres:5432/nexus_cos
    ports:
      - "3020:3020"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - nexus-network

  # PuaboVerse Module
  puaboverse:
    build:
      context: ./extended/puaboverse
      dockerfile: Dockerfile
    container_name: nexus-puaboverse
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://nexus_user:${POSTGRES_PASSWORD:-nexus_secure_password}@postgres:5432/nexus_cos
    ports:
      - "3030:3030"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - nexus-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  nexus-network:
    driver: bridge