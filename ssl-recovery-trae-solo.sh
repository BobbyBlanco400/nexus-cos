#!/bin/bash
# SSL Recovery & Configuration Script - TRAE Solo Implementation
# Addresses SSL/TLS issues identified in the TRAE Solo report

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# SSL Configuration based on TRAE Solo report
VPS_IP="74.208.155.161"
DOMAIN_MAIN="nexuscos.online"
DOMAIN_BETA="beta.nexuscos.online"
SSL_BASE_PATH="/etc/ssl/ionos"
NGINX_SITES_AVAILABLE="/etc/nginx/sites-available"
NGINX_SITES_ENABLED="/etc/nginx/sites-enabled"

print_header() {
    echo -e "${PURPLE}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                    SSL RECOVERY & CONFIGURATION - TRAE SOLO                 ║${NC}"
    echo -e "${PURPLE}║                    Implementing IONOS SSL + CloudFlare CDN                  ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

print_step() {
    echo -e "\n${BLUE}==== $1 ====${NC}"
}

print_success() {
    echo -e "${GREEN}[✅ SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[⚠️  WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[❌ ERROR]${NC} $1"
}

print_info() {
    echo -e "${CYAN}[ℹ️  INFO]${NC} $1"
}

# Check SSL certificate configuration
check_ssl_certificates() {
    print_step "Phase 1: SSL Certificate Validation"
    
    local domains=("$DOMAIN_MAIN" "$DOMAIN_BETA")
    
    for domain in "${domains[@]}"; do
        print_info "Checking SSL certificates for $domain..."
        
        local cert_path="$SSL_BASE_PATH/$domain"
        local fullchain="$cert_path/fullchain.pem"
        local privkey="$cert_path/privkey.pem"
        
        # Check if certificate files exist
        if [[ -f "$fullchain" && -f "$privkey" ]]; then
            print_success "Certificate files found for $domain"
            
            # Validate certificate
            if openssl x509 -in "$fullchain" -text -noout >/dev/null 2>&1; then
                print_success "Certificate validation passed for $domain"
                
                # Check expiration
                local expiry=$(openssl x509 -in "$fullchain" -enddate -noout | cut -d= -f2)
                print_info "Certificate expires: $expiry"
            else
                print_error "Certificate validation failed for $domain"
            fi
        else
            print_error "Certificate files missing for $domain"
            print_info "Expected paths:"
            print_info "  - $fullchain"
            print_info "  - $privkey"
        fi
    done
}

# Generate Nginx SSL configurations
generate_nginx_ssl_config() {
    print_step "Phase 2: Nginx SSL Configuration Generation"
    
    # Main domain configuration
    print_info "Generating Nginx config for $DOMAIN_MAIN..."
    cat > "/tmp/nexuscos-ssl.conf" << EOF
# Nexus COS SSL Configuration - Main Domain
# Generated by TRAE Solo SSL Recovery Script

server {
    listen 80;
    server_name $DOMAIN_MAIN www.$DOMAIN_MAIN;
    return 301 https://\$server_name\$request_uri;
}

server {
    listen 443 ssl http2;
    server_name $DOMAIN_MAIN www.$DOMAIN_MAIN;
    
    # SSL Configuration - IONOS Certificates
    ssl_certificate $SSL_BASE_PATH/$DOMAIN_MAIN/fullchain.pem;
    ssl_certificate_key $SSL_BASE_PATH/$DOMAIN_MAIN/privkey.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # CloudFlare Real IP
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 131.0.72.0/22;
    real_ip_header CF-Connecting-IP;
    
    # Root directory
    root /var/www/nexus-cos;
    index index.html index.htm;
    
    # API Proxy - Backend Services
    location /api/node/ {
        proxy_pass http://localhost:3001/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
    
    location /api/ai/ {
        proxy_pass http://localhost:3010/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
    
    location /api/key/ {
        proxy_pass http://localhost:3014/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_Set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://localhost:3001/health;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
    
    # Frontend static files
    location / {
        try_files \$uri \$uri/ /index.html;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /var/www/html;
    }
}
EOF
    
    # Beta domain configuration
    print_info "Generating Nginx config for $DOMAIN_BETA..."
    cat > "/tmp/beta-nexuscos-ssl.conf" << EOF
# Nexus COS SSL Configuration - Beta Domain
# Generated by TRAE Solo SSL Recovery Script

server {
    listen 80;
    server_name $DOMAIN_BETA;
    return 301 https://\$server_name\$request_uri;
}

server {
    listen 443 ssl http2;
    server_name $DOMAIN_BETA;
    
    # SSL Configuration - IONOS Certificates
    ssl_certificate $SSL_BASE_PATH/$DOMAIN_BETA/fullchain.pem;
    ssl_certificate_key $SSL_BASE_PATH/$DOMAIN_BETA/privkey.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # CloudFlare Real IP (same as main domain)
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 131.0.72.0/22;
    real_ip_header CF-Connecting-IP;
    
    # Root directory
    root /var/www/beta-nexus-cos;
    index index.html index.htm;
    
    # Same API proxy configuration as main domain
    location /api/node/ {
        proxy_pass http://localhost:3001/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
    
    location /api/ai/ {
        proxy_pass http://localhost:3010/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
    
    location /api/key/ {
        proxy_pass http://localhost:3014/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
    }
    
    location /health {
        proxy_pass http://localhost:3001/health;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_Set_header X-Forwarded-Proto \$scheme;
    }
    
    location / {
        try_files \$uri \$uri/ /index.html;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /var/www/html;
    }
}
EOF
    
    print_success "Nginx SSL configurations generated:"
    print_info "  - Main domain: /tmp/nexuscos-ssl.conf"
    print_info "  - Beta domain: /tmp/beta-nexuscos-ssl.conf"
}

# Generate SSL test script
generate_ssl_test_script() {
    print_step "Phase 3: SSL Test Script Generation"
    
    cat > "/tmp/test-ssl-trae-solo.sh" << 'EOF'
#!/bin/bash
# SSL Testing Script for TRAE Solo Implementation

echo "🔐 Testing SSL Configuration for Nexus COS"
echo "=========================================="

DOMAINS=("nexuscos.online" "beta.nexuscos.online")

for domain in "${DOMAINS[@]}"; do
    echo ""
    echo "Testing $domain:"
    echo "----------------"
    
    # Test SSL handshake
    echo "🤝 SSL Handshake:"
    if timeout 10 openssl s_client -connect "$domain:443" -servername "$domain" </dev/null 2>/dev/null | grep -q "CONNECTED"; then
        echo "  ✅ SSL handshake successful"
    else
        echo "  ❌ SSL handshake failed"
    fi
    
    # Test certificate details
    echo "📜 Certificate Details:"
    timeout 10 openssl s_client -connect "$domain:443" -servername "$domain" </dev/null 2>/dev/null | openssl x509 -noout -subject -issuer -dates 2>/dev/null || echo "  ❌ Could not retrieve certificate"
    
    # Test HTTP to HTTPS redirect
    echo "🔄 HTTP to HTTPS Redirect:"
    if curl -s -I "http://$domain" | grep -q "301\|302"; then
        echo "  ✅ HTTP redirect working"
    else
        echo "  ❌ HTTP redirect not working"
    fi
    
    # Test HTTPS response
    echo "🌐 HTTPS Response:"
    if curl -s -I "https://$domain" | grep -q "200\|301\|302"; then
        echo "  ✅ HTTPS responding"
    else
        echo "  ❌ HTTPS not responding"
    fi
done

echo ""
echo "SSL testing complete!"
EOF
    
    chmod +x "/tmp/test-ssl-trae-solo.sh"
    print_success "SSL test script generated: /tmp/test-ssl-trae-solo.sh"
}

# Generate CloudFlare CDN configuration
generate_cloudflare_config() {
    print_step "Phase 4: CloudFlare CDN Configuration"
    
    cat > "/tmp/cloudflare-config.md" << EOF
# CloudFlare CDN Configuration - TRAE Solo Implementation

## DNS Settings
Configure the following DNS records in CloudFlare:

### Main Domain (nexuscos.online)
- Type: A
- Name: @
- IPv4: 74.208.155.161
- Proxy: ✅ (Orange Cloud)
- TTL: Auto

- Type: A  
- Name: www
- IPv4: 74.208.155.161
- Proxy: ✅ (Orange Cloud)
- TTL: Auto

### Beta Domain (beta.nexuscos.online)
- Type: A
- Name: beta
- IPv4: 74.208.155.161
- Proxy: ✅ (Orange Cloud)
- TTL: Auto

## SSL/TLS Settings
- SSL/TLS encryption mode: **Full (Strict)**
- Always Use HTTPS: ✅ Enabled
- HTTP Strict Transport Security (HSTS): ✅ Enabled
- Minimum TLS Version: 1.2
- Opportunistic Encryption: ✅ Enabled
- TLS 1.3: ✅ Enabled

## Security Settings
- Security Level: Medium
- Bot Fight Mode: ✅ Enabled
- Challenge Passage: 30 minutes
- Browser Integrity Check: ✅ Enabled

## Firewall Rules
Consider adding these rules:
1. Block IPs not from trusted countries
2. Rate limiting for API endpoints
3. DDoS protection (automatic)

## Page Rules
Create these page rules:
1. nexuscos.online/* - Cache Level: Standard
2. nexuscos.online/api/* - Cache Level: Bypass
3. beta.nexuscos.online/* - Cache Level: Standard
4. beta.nexuscos.online/api/* - Cache Level: Bypass

## Origin Certificates
If using CloudFlare Origin Certificates:
1. Generate origin certificate in CloudFlare
2. Install on server at:
   - /etc/ssl/cloudflare/nexuscos.online/cert.pem
   - /etc/ssl/cloudflare/nexuscos.online/key.pem
3. Update Nginx configuration accordingly
EOF
    
    print_success "CloudFlare configuration guide generated: /tmp/cloudflare-config.md"
}

# Generate deployment commands
generate_deployment_commands() {
    print_step "Phase 5: Deployment Commands Generation"
    
    cat > "/tmp/ssl-deployment-commands.sh" << 'EOF'
#!/bin/bash
# SSL Deployment Commands for VPS (74.208.155.161)
# Execute these commands on the VPS

echo "🚀 Deploying SSL Configuration to VPS"
echo "====================================="

# 1. Backup existing configurations
echo "📦 Creating backups..."
sudo cp -r /etc/nginx/sites-available /etc/nginx/sites-available.backup.$(date +%Y%m%d)
sudo cp -r /etc/ssl /etc/ssl.backup.$(date +%Y%m%d)

# 2. Copy new SSL configurations
echo "📋 Installing new Nginx configurations..."
sudo cp /tmp/nexuscos-ssl.conf /etc/nginx/sites-available/nexuscos.conf
sudo cp /tmp/beta-nexuscos-ssl.conf /etc/nginx/sites-available/beta-nexuscos.conf

# 3. Enable sites
echo "🔗 Enabling sites..."
sudo ln -sf /etc/nginx/sites-available/nexuscos.conf /etc/nginx/sites-enabled/
sudo ln -sf /etc/nginx/sites-available/beta-nexuscos.conf /etc/nginx/sites-enabled/

# 4. Test Nginx configuration
echo "🧪 Testing Nginx configuration..."
sudo nginx -t

# 5. Reload Nginx
echo "🔄 Reloading Nginx..."
sudo systemctl reload nginx

# 6. Check SSL certificates
echo "🔐 Checking SSL certificates..."
openssl verify /etc/ssl/ionos/nexuscos.online/fullchain.pem
openssl verify /etc/ssl/ionos/beta.nexuscos.online/fullchain.pem

# 7. Test SSL handshake
echo "🤝 Testing SSL handshake..."
echo | openssl s_client -connect nexuscos.online:443 -servername nexuscos.online
echo | openssl s_client -connect beta.nexuscos.online:443 -servername beta.nexuscos.online

echo "✅ SSL deployment complete!"
EOF
    
    chmod +x "/tmp/ssl-deployment-commands.sh"
    print_success "SSL deployment commands generated: /tmp/ssl-deployment-commands.sh"
}

# Main execution function
main() {
    print_header
    
    check_ssl_certificates
    generate_nginx_ssl_config
    generate_ssl_test_script
    generate_cloudflare_config
    generate_deployment_commands
    
    print_step "SSL Recovery Generation Complete"
    print_success "SSL configuration files generated successfully!"
    print_info "Next steps:"
    print_info "1. Copy configurations to VPS"
    print_info "2. Execute deployment commands"
    print_info "3. Test SSL functionality"
    print_info "4. Configure CloudFlare CDN"
    echo ""
}

# Execute main function
main "$@"